#* Reference: https://docs.gunicorn.org/en/latest/deploy.html

# Expires map for file TTL
  # Reference: https://www.digitalocean.com/community/tutorials/how-to-implement-browser-caching-with-nginx-s-header-module-on-ubuntu-20-04
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    ~image/                    max;
    ~font/                     max;
}

upstream server__test.zgry.dev {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response
    # for UNIX domain socket setups
    server unix:/run/test.zgry.dev-gunicorn.sock fail_timeout=0;
    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
}

server {
#    listen       80;
    server_name  test.zgry.dev www.test.zgry.dev;
    root   /var/www/test.zgry.dev/html;

    access_log   /var/log/nginx/test.zgry.dev/access.log;
    error_log    /var/log/nginx/test.zgry.dev/error.log;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    #access_log  /var/log/nginx/host.access.log  main;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {

# Direct visitor to static files in '/var/www/test.zgry.dev/html' dir
#        try_files $uri $uri/ /index.php$is_args$args =404;

# Direct visitor to Django app server
#        try_files $uri @proxy_to_app;

# Direct visitor to static files serving web site/app
        root /var/www/test.zgry.dev/app/dist;
        try_files $uri $uri/ /index.html;

# Cache assets for 30 days
        #expires 30d;
# Cache assets according to file type
        expires $expires;
    }

    location /admin/ {
        try_files $uri @proxy_to_app;
    }

    location /auth/ {
        try_files $uri @proxy_to_app;
    }

    location /api/ {
        try_files $uri @proxy_to_app;
    }

    location /api-auth/ {
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        proxy_pass http://server__test.zgry.dev;
    }

    location = /favicon.ico { access_log off; log_not_found off; }

    location ^~ /static/ {
#        gzip_static on;
        expires 30d;
        alias /var/www/test.zgry.dev/static/;
    }

    location ^~ /uploads/ {
        expires 30d;
        alias /var/www/test.zgry.dev/uploads/;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /var/www/test.zgry.dev/html;

        access_log   /var/log/nginx/test.zgry.dev/access.log;
        error_log    /var/log/nginx/test.zgry.dev/error.log;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /var/www/test.zgry.dev/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}


    #listen [::]:443 http2 ssl ipv6only=on; # managed by Certbot via setup/web/html
    listen 443 http2 ssl; # managed by Certbot via setup/web/html
    ssl_certificate /etc/letsencrypt/live/test.zgry.dev/fullchain.pem; # managed by Certbot via setup/web/html
    ssl_certificate_key /etc/letsencrypt/live/test.zgry.dev/privkey.pem; # managed by Certbot via setup/web/html
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot via setup/web/html
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot via setup/web/html

}
server {
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }


    if ($host = www.test.zgry.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot via setup/web/html


    if ($host = test.zgry.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot via setup/web/html


    listen       80;
    listen       [::]:80;
    server_name  test.zgry.dev www.test.zgry.dev;
    return 404; # managed by Certbot via setup/web/html
}
