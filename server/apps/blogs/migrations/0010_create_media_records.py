# Generated by Django 5.1.5 on 2025-05-20 21:39

from django.db import migrations, models


def create_media_records(apps, schema_editor):
    Post = apps.get_model('blogs', 'Post')
    Media = apps.get_model('blogs', 'Media')

    for post in Post.objects.all().order_by('id'):
        if post.media:  # Check if post has a media file
            # Create new Media record
            media = Media(
                file=post.media,
                mp3_file=post.media_mp3 if hasattr(post, 'media_mp3') else None,
                s3_file_key=post.media_s3_file_key if hasattr(post, 'media_s3_file_key') else '',
                media_type=post.media_type if hasattr(post, 'media_type') else 'audio'
            )
            media.save()

            # Store the media ID in the temporary field
            post.tmp_media_id = media.id
            post.save()

            # Clear the media field to avoid any conflicts
            post.media = None
            post.save()


def reverse_media_records(apps, schema_editor):
    Post = apps.get_model('blogs', 'Post')
    Media = apps.get_model('blogs', 'Media')

    # Restore original media fields on posts
    for post in Post.objects.all():
        if hasattr(post, 'tmp_media_id') and post.tmp_media_id:
            try:
                media = Media.objects.get(id=post.tmp_media_id)
                # Restore the original media file
                post.media = media.file
                # Restore other media-related fields if they exist
                if hasattr(post, 'media_mp3'):
                    post.media_mp3 = media.mp3_file
                if hasattr(post, 'media_s3_file_key'):
                    post.media_s3_file_key = media.s3_file_key
                if hasattr(post, 'media_type'):
                    post.media_type = media.media_type
                post.save()
            except Media.DoesNotExist:
                # Skip if media record doesn't exist
                continue

    # Remove all Media records
    Media.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('blogs', '0009_media'),
    ]

    operations = [
        # Add temporary field to store media ID
        migrations.AddField(
            model_name='post',
            name='tmp_media_id',
            field=models.IntegerField(null=True, blank=True),
        ),
        # Create media records and store IDs
        migrations.RunPython(
            create_media_records,
            reverse_media_records
        ),
        # # Remove the temporary field
        # migrations.RemoveField(
        #     model_name='post',
        #     name='tmp_media_id',
        # ),
    ]