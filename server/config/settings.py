"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 3.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1@%k#v4j5q=m9l7z&230(0d0(nm$-v(kk+zv5y@afw%xeebx0!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',

    'apps.users.apps.UsersConfig',

    'apps.blogs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging
# https://docs.djangoproject.com/en/3.2/topics/logging/
import os
log_dir: Path = BASE_DIR / '..' / 'log'
log_filepath: Path = log_dir / 'server-errors.log'
log_symlinkpath: str = f'/var/log/app-errors/{BASE_DIR.parent.name}.log'
if not log_dir.exists():
    os.mkdir(log_dir)
if not log_filepath.exists():
    try:
        os.mknod(log_filepath)
    except PermissionError:
        with open(log_filepath, 'w'): pass
def symlink_error_log_in_system_logs():
    if not Path(log_symlinkpath).parent.exists():
        import subprocess
        subprocess.call('./sys/mkdir-error-log')
        #subprocess.call(BASE_DIR / '..' / 'sys/mkdir-error-log')
    if not Path(log_symlinkpath).is_symlink():
        os.symlink(log_filepath, log_symlinkpath)
if not DEBUG:
    try:
        symlink_error_log_in_system_logs()
    except FileNotFoundError as e:
        print(e)
import copy
from django.utils.log import DEFAULT_LOGGING
LOGGING = copy.deepcopy(DEFAULT_LOGGING)
LOGGING['handlers'].update({
    'file_errors': {
        'level': 'ERROR',
        'filters': ['require_debug_false'],
        'formatter': 'django.server',
        'class': 'logging.FileHandler',
        'filename': log_filepath,
    },
})
LOGGING['loggers']['django']['handlers'].append('file_errors')

# User Model
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/
AUTH_USER_MODEL = 'users.User'

# REST Framework
# https://www.django-rest-framework.org/#example
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

# Handle server headers required for Cross-Origin Resource Sharing (CORS)
# https://pypi.org/project/django-cors-headers/
CORS_ALLOWED_ORIGINS = [
    #"http://localhost:8080",
    #"http://127.0.0.1:9000"
    "https://dev.wut.sh",
]
if DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        "http://localhost:3000",
    ])

